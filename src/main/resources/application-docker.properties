spring.application.name=spring-boot-oop-project

# MongoDB Configuration (Docker)
spring.data.mongodb.host=${SPRING_DATA_MONGODB_HOST:mongodb}
spring.data.mongodb.port=${SPRING_DATA_MONGODB_PORT:27017}
spring.data.mongodb.database=${SPRING_DATA_MONGODB_DATABASE:productdb}

# Redis Configuration (Docker)
spring.data.redis.host=${SPRING_DATA_REDIS_HOST:redis}
spring.data.redis.port=${SPRING_DATA_REDIS_PORT:6379}

# Spring Cache Configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=60000ms

# Spring Data Configuration
spring.data.mongodb.repositories.enabled=true
spring.data.redis.repositories.enabled=false

# Kafka Producer Configuration (Docker)
spring.kafka.producer.bootstrap-servers=${SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS:kafka:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.add.type.headers=false
spring.kafka.producer.properties.spring.json.trusted.packages=com.example.springbootoopproject.model

# Kafka Consumer Configuration (Docker)
spring.kafka.consumer.bootstrap-servers=${SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS:kafka:9092}
spring.kafka.consumer.group-id=${SPRING_KAFKA_CONSUMER_GROUP_ID:product-group}
spring.kafka.consumer.auto-offset-reset=${SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.springbootoopproject.model

# Spring Actuator Endpoints
management.endpoints.web.exposure.include=health,info,metrics,cache
management.endpoint.health.show-details=always

# Logging Configuration
logging.level.com.example.springbootoopproject=INFO
logging.level.org.springframework.kafka=INFO
logging.level.org.mongodb.driver=INFO
